----Multiple DB connections-
 first you have to set application.properties like this

#Database
database1.datasource.url=jdbc:mysql://localhost/testdb
database1.datasource.username=root
database1.datasource.password=root
database1.datasource.driver-class-name=com.mysql.jdbc.Driver

database2.datasource.url=jdbc:mysql://localhost/testdb2
database2.datasource.username=root
database2.datasource.password=root
database2.datasource.driver-class-name=com.mysql.jdbc.Driver
Then define them as providers (@Bean) like this:

Multiple DBs:
   @Configuration
@EnableJpaRepositories(
    basePackages = "com.example.secondary.repository",                  // ← matches base pkg of repo configured for this DB
    entityManagerFactoryRef = "secondaryEntityManagerFactory",         // ← custom EntityManager
    transactionManagerRef = "secondaryTransactionManager"              // ← custom TxManager
)

@Bean(name = "datasource1")
@ConfigurationProperties("database1.datasource")
@Primary
public DataSource dataSource(){
    return DataSourceBuilder.create().build();
}

@Bean(name = "datasource2")
@ConfigurationProperties("database2.datasource")
public DataSource dataSource2(){
    return DataSourceBuilder.create().build();
}
Note that I have @Bean(name="datasource1") and @Bean(name="datasource2"), 
then you can use it when we need datasource as @Qualifier("datasource1") and @Qualifier("datasource2") ,    
-----------------------------------------------



JPA vs Hibernate : hibernate is implementation of JPA
•	@Table:This annotation is optional and provides more control over the table mapping.
   It allows specifying the table name, schema, catalog, unique constraints, and indexes. 
•	@Entity: mandatory for ORM mapping and persistence of object in DB


Projections : 
  Spring Data JPA allows us to use projections to retrieve a subset of data from the database. 
  Projections allow us to select only specific fields from an entity or combine fields from multiple entities into a single DTO.

Criteria API and Specification Interface in Data : to dynamically build queries.
