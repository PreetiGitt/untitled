Theory:
1. Filter vs Map vs flatmap
2. Terminal vs intermediate methods
3. Sateful vs stateless
  There are stateless operations, such as filter(), map(), and flatMap(), which do not keep data around (do not maintain state) while moving from processing from one stream element to the next.
And there are stateful operations, such as distinct(), limit(), sorted(), reduce(), and collect(), 
which may pass the state from previously processed elements to the processing of the next element.
 Statefulness can impact the parallelization and performance of stream operations.
4. Parallel Streams
--------
Infinite Stream:
 It is crucial to use a limit() method before executing a collect() method that is a terminal operation, otherwise our program will run indefinitely:

// given
Stream<Integer> infiniteStream = Stream.iterate(0, i -> i + 2);

// when
List<Integer> collect = infiniteStream
  .limit(10)
  .collect(Collectors.toList());

---------
list.stream().sorted().collect(Collectors.toList())   //Asc
list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList()) //Dsc

--------------
For objects:
List<Employee>  empList;

empList.stream().sort(Comparator.comparing(Employee::getSalary)).collect(Collectors.toList())  // sorted by salary

Optional<Employee> emp = empList.stream()
        .sorted(Comparator.comparing(Employee::getSalary).reversed()).skip(1).findFirst();// 2nd  Highest salary


-- sort by some field:
 map =empList.stream().
                sorted(Comparator.comparing(Employee::getAge).reversed()).
                collect(Collectors.groupingBy(Employee::getDepartment));

----filter then sort:
list= empList.stream().filter(e->e.getSalary()>70000).sorted(Comparator.comparing(Employee::getName)).collect(Collectors.toList())

------------max element

Integer var = list.stream().max(Integer::compare).get(); 

--------------- find duplicates
 list=  list.stream().filter(e-> !set.add(e)).collect(Collectors.toList())

----------- PartitionBy - divides into 2 sublist with true & false case
  Map<Boolean, List<Integer> > 
            map = list.stream().collect(Collectors.partitioningBy(num -> num > 3)); 

-------- Sum of squares of even numbers
   Arrays.stream(array)
                .filter(n -> n % 2 == 0)         // Filter even numbers
                .map(n -> n * n)                 // Square each even number
                .sum(); 
----------IntStream 
   IntStream.range(1, 10)
          .filter(n -> n % 2 == 0)
          .forEach(System.out::println);

----------- frequency count
 Map<Integer, Long> frequencyMap = Arrays.stream(arr)
                .boxed() // Convert IntStream to Stream<Integer>
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));


