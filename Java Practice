--------------------Binary Search:

     int binarySearch(int [] arr, int toFind){
      int low=0, high= arr.length-1;
      while(low<high){
              mid=low+high/2;
            if (arr[mid]== toFind)
            return mid;
  
        if(toFind>arr[mid])
           low=mid+1;
        else
            high=mid-1;  }
      
    }
----------------Fibonacci----------
// Recursive implementation of Fibonacci series 
// program in Java
import java.io.*;

class Geeks
{
    // Function to print the fibonacci series
    static int fib(int n)
    {
        // Base Case
        if (n <= 1)
            return n;

        // Recursive call
        return fib(n - 1) + fib(n - 2);
    }

    // Driver Code
    public static void main(String args[])
    {
        // Given Number N
        int N = 3;

        // Print the first N numbers
        for (int i = 0; i < N; i++) {

            System.out.print(fib(i) + " ");
        }
    }
}
-------------Permuatations----------------
  // Recursive method to generate permutations
// prefix is empty string initially
    public static void generatePermutations(String str, String prefix) {
        if (str.length() == 0) {
            System.out.println(prefix);
        } else {
            for (int i = 0; i < str.length(); i++) {
                char ch = str.charAt(i);
                String remaining = str.substring(0, i) + str.substring(i + 1);
                generatePermutations(remaining, prefix + ch);
            }
        }
    }

------------- Finding Frequncy---------
List;
Map<String, Integer> map= new Hashmap<>();
 for (String s:list){
   if map.containskey(s) {
    map.put(s, map.getValue(s)+1);
   else
    map.put(s,1);
}
}
---------swap two numbers without using 3rd variable-----

a=a+b;
b=a-b ; a=a-b;
------------- two sum-------
 public static int[] twoSum(int[] numbers, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < numbers.length; i++) {
            int x = numbers[i];
            if (map.containsKey(target - x)) {
                return new int[]{map.get(target - x) , i};
            }
            map.put(x, i);
        }
        return null;
    }
-------Simple Palindrome Check---------
 boolean isPalindrome(String str){
  StringBuilder strRev= str;
    strRev= strRev.reverse(); // .reverse() method of StringBuilder
     if (str==strRev){
       return true; }
         return false;
}

------------- valid palindrome sentence-------------
static boolean sentencePalindrome(String s)
    {
        char[] str = s.toCharArray();
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++){
            if (Character.isLetterOrDigit(str[i]))
                stack.push(str[i]);
        }
        String string = "";
        String reverse = "";
        for (Character character : stack) {
            reverse += Character.toLowerCase(character);
            System.out.println(reverse);
        }
        while (!stack.isEmpty()){
            string += Character.toLowerCase(stack.pop());
        }
        return string.equals(reverse);
    }
----------------Find duplicates---------------

List<String> wordsList = Arrays.stream(sentence.split(" ")).collect(Collectors.toList());

Set<String> tempSet = new HashSet<>();

List<String> duplicateWords = wordsList.stream()
    .filter(w -> !tempSet.add(w))
    .collect(Collectors.toList());

System.out.println(duplicateWords); 

ORRR----

List<String> wordsList = Arrays.asList(sentence.split(" "));
Set<String> tempSet = new HashSet<>();
List<String> duplicateWords = new ArrayList<>();

for (String word : wordsList) {
  if (!tempSet.add(word)) {
    duplicateWords.add(word);
  }
}

System.out.println(duplicateWords);

--------------Find non-duplicates-----------
Set<Integer> targetSet = sourceList.stream().collect(Collectors.toSet());


------------- Comut max element--------

int maxValue= Collections.max(list);
 int freq= Collections.frequency(list, maxValue);


-------------- Reverse a Linked List----------

 Node n1=new Node(3);
    Node n2=new Node(4);
    Node n3=new Node(5);
    Node n4=new Node(6);
      n1.setNode(n2);
      n2.setNode(n3);
      n3.setNode(n4);
      n4.setNode(null);

      Node head,prev, curr;
      head=n1;
        curr=head;
      prev=null;


      while(curr!=null){

          head=head.next;   //
          curr.next=prev;//
          prev=curr;
          curr=head;
      }
      head=prev;
        while(head!=null){
            System.out.println(head.val);
                head=head.next;
        }

------------- Delete Linked list mid node------

1. Count nodes
2. make  mid-1 node to point mid+1, instead of mid 

  int nodeCount(){
      int count=0;
      while (head!=null){
          count++;
           head=head.next;
    }

   }
   delete midNode(){
   int mid= nodeCount()/2;
   while (mid>1){
     head=head.next
      mid--;
     }
    head.next=head.next.next;
}

---------------------------- Find middle node in linked list--------
logic:
2 pointers- 2nd stepping double of first. so 2nd reaches the last while first covers half

Node slow, fast, midNode;
slow=fast=head;

while(fast.next!=null && fast.next.next!=null) // checks for both even or odd numbered list
{
slow=slow.next;
fast=fast.next.next;
  
}
midNode=slow;

------------------------------------------------------





