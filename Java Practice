--------------------Binary Search:

     int binarySearch(int [] arr, int toFind){
      int low=0, high= arr.length-1;
      while(low<high){
              mid=low+high/2;
            if (arr[mid]== toFind)
            return mid;
  
        if(toFind>arr[mid])
           low=mid+1;
        else
            high=mid-1;  }
      
    }

------------- Finding Frequncy---------
List;
Map<String, Integer> map= new Hashmap<>();
 for (String s:list){
   if map.containskey(s) {
    map.put(s, map.getValue(s)+1);
   else
    map.put(s,1);
}
}
---------swap two numbers without using 3rd variable-----

a=a+b;
b=a-b ; a=a-b;
------------- two sum-------
 public static int[] twoSum(int[] numbers, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < numbers.length; i++) {
            int x = numbers[i];
            if (map.containsKey(target - x)) {
                return new int[]{map.get(target - x) , i};
            }
            map.put(x, i);
        }
        return null;
    }

------------- valid palindrome sentence-------------
static boolean sentencePalindrome(String s)
    {
        char[] str = s.toCharArray();
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++){
            if (Character.isLetterOrDigit(str[i]))
                stack.push(str[i]);
        }
        String string = "";
        String reverse = "";
        for (Character character : stack) {
            reverse += Character.toLowerCase(character);
            System.out.println(reverse);
        }
        while (!stack.isEmpty()){
            string += Character.toLowerCase(stack.pop());
        }
        return string.equals(reverse);
    }

