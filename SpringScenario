1. How does autoconfiguration works:
  automatically configuring beans based on the classpath, environment, and property files.
  (pom dpenedencies)
  @EnableAutoConfiguration: Triggers Spring Boot to scan for auto-config classes and load them conditionally.


--------------------------------------
2. How to reduce booting time for the app: 
  -Lazy initialisation
  -Profile-Based Config Loading: Use active profiles (spring.profiles.active) to load only whatâ€™s required.
  - Reduce External Dependency Initialization:Delay connecting to databases, Kafka, etc., if not required at startup.
  -Exclude auto-configurations in your @SpringBootApplication:
     @SpringBootApplication(exclude = {SecurityAutoConfiguration.class, DataSourceAutoConfiguration.class})
      public class MyApp { }
  - Avoid scanning the entire pkg tree : @SpringBootApplication(scanBasePackages = {"com.example.service", "com.example.controller"})

----------------------
3. How to scale the application:
  -Horizontal Scaling: behind a loadbalancer (AWS platform)
  -Vertical Scaling: temporaray soltuion (increasing CPU, memory allaocations), tomcat threads.
  -DB scaling : connectio pool

