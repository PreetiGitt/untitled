--------

Future(Java 5): It is generally used with an ExecutorService, and we get a Future object when we submit tasks to the executor. 
However, it doesn’t allow us to define any computation steps to be executed once the computation is finished. The get() method is blocking, 
which means it waits until the task is completed and can make the application less responsive.

CompletableFuture (Java 8): It can be used as a Future and 
also allows us to attach callbacks via methods like thenApply, thenAccept, and thenRun. 
These methods let us execute additional actions upon completion of the original task, in a non-blocking fashion. CompletableFuture can also be manually completed.

Exception Handling
Future: Does not provide a built-in mechanism for handling exceptions. Exception handling needs to be implemented externally. Exceptions are caught during the get() method call.

CompletableFuture: Provides methods like exceptionally and handle to deal with exceptions in a chain of asynchronous tasks. 
Allows defining a recovery or fallback mechanism within the computation chain.
-------
AOP (Aspect-Oriented Programming): A technique that allows you to inject cross-cutting concerns (such as logging) into your code without modifying it
-----------
How to JVM handles memory leaks:
java handles it inetrnallly by GC but

1. by enabling verbose garbage collection
2. Eclipse gives memory leaks warnings
3. code reviews
4.A Java Profiler is a tool that monitors Java bytecode constructs and operations at the JVM level.


-------------------------

JPA Transaction propagation:
1. REQUIRED is the default propagation. Spring checks if there is an active transaction, 
and if nothing exists, it creates a new one. Otherwise, the business logic appends to the currently active transaction

2. REQUIRED is the default propagation. Spring checks if there is an active transaction, 
and if nothing exists, it creates a new one. Otherwise, the business logic appends to the currently active transaction

3. When the propagation is MANDATORY, if there is an active transaction, then it will be used. 
If there isn’t an active transaction, then Spring throws an exception:

-- API Versioning- a transparent way for API changes
  URL based, header based , Query param based

--Spring Security
Add Spring Security Starter Dependency i.e. spring-boot-starter-security to pom.xml file.
Extend WebSecurityConfigureAdapter in a custom class and use @EnableWebSecurity annotation.
Override configure(HttpSecurity) method to specify security rules.


--- DB Connection Pooling- a technique that reduces the number of times a connection to a database needs to be opened. 
It involves keeping a pool of open connections that can be reused by applications. HikariCP, Apache Commons DBCP, C3PO
--- API Proxy:

--Spring Vs SpringBoot-> starter Parent dependency, in-memory DB such as H2, embeeded servers tomcat n jetty.
   The most important feature of the Spring Boot is Autoconfiguration.

----Multiple DB connections-
 irst you have to set application.properties like this

#Database
database1.datasource.url=jdbc:mysql://localhost/testdb
database1.datasource.username=root
database1.datasource.password=root
database1.datasource.driver-class-name=com.mysql.jdbc.Driver

database2.datasource.url=jdbc:mysql://localhost/testdb2
database2.datasource.username=root
database2.datasource.password=root
database2.datasource.driver-class-name=com.mysql.jdbc.Driver
Then define them as providers (@Bean) like this:

@Bean(name = "datasource1")
@ConfigurationProperties("database1.datasource")
@Primary
public DataSource dataSource(){
    return DataSourceBuilder.create().build();
}

@Bean(name = "datasource2")
@ConfigurationProperties("database2.datasource")
public DataSource dataSource2(){
    return DataSourceBuilder.create().build();
}
Note that I have @Bean(name="datasource1") and @Bean(name="datasource2"), 
then you can use it when we need datasource as @Qualifier("datasource1") and @Qualifier("datasource2") ,   

How JPA Repositories Know Which DB to Use
Spring determines this via @EnableJpaRepositories annotation:

java
Copy
Edit
@Configuration
@EnableJpaRepositories(
    basePackages = "com.example.repo1", // package of repositories for DB1
    entityManagerFactoryRef = "entityManagerFactory1",
    transactionManagerRef = "transactionManager1"
)
public class Db1Config {
    // datasource, entityManagerFactory, txManager beans for DB1
}

-----------------------------------------------

-- Rabbitmq
   Exchange -In RabbitMQ, an exchange is a message routing agent that determines how messages are sent to queues. 
    The type of exchange determines how a message is routed. There are four main types of exchanges in RabbitMQ: 
        Direct: Routes messages to queues based on an exact routing key match 
        Fanout: Broadcasts messages to all bound queues 


