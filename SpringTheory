Spring Cloud: Spring Cloud is a collection of projects like load balancing, service discovery, circuit breakers, 
    routing, micro-proxy, etc will be given by Spring Cloud. 
-------------------
**SpringBoot over Spring


**@SpringBootApplication Annotation. This annotation is used to mark the main class of a Spring Boot application. 
                              @SpringBootConfiguration, @EnableAutoConfiguration, and @ComponentScan

**SpringBoot StarterParent dependency-
<Parent> </parent>
  The spring-boot-starter-parent project is a special starter project that provides default configurations for our application and 
  a complete dependency tree to quickly build our Spring Boot project.
  Once we’ve declared the starter parent in our project, we can pull any dependency from the parent by just declaring it in our dependencies tag


**SpringBoot starter dependencies- web, test , thymeleaf,JPA
**The Spring Boot DevTools dependency enhances developer productivity by providing features such as automatic application restarts, 
live reloading, and property overrides

**StarterClass @SpringBootApplication- has main method which has run() which returns ApplicationContext type .which is used to create bean

**To exclude a config -- @EnableAutoConfiguration(exclude={ABC.class})

** @PropertySource("classpath:ABC.properties").. can read the values with @value 

**@PostConstruct, @PreDestroy -- for doing something after/ before any bean or component object is created , after dependency injection

** Ioc- design principle to invert flow of control-- Controlling of Java objects and their lifecycle is not done by the developers, hence the name Inversion Of Control.
** Dependecy Injection: implements IoC(Inversion of control) : refer https://medium.com/edureka/what-is-dependency-injection-5006b53af782
     -- dependency - @component (eg Class A)
        created bean in starter class as context.getBean(A.class);
   
  Types of DI: Constructor based, setters based, variable based

** @RequestParam -   , for mutiple params, Can be optional too
    Default value it may take
    takes URL query params
  eg:  /users/id?10

** @PathVariable
@GetMapping("/users/{id}")
public ResponseEntity<User> getUserById(@PathVariable("id") Long userId)

** @RestController= @controller+ @ResponseBody
-------------------------
** Bean and its Scope:  A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container
1.singleton- the container creates a single instance of that bean;
         all requests for that bean name will return the same object : default is singleton only.
2.prototype - new instance as per request
3.request
4.session
5.application
6.websocket
   3,4,5,6 are for web aware applications.
Use Case: Singleton beans are suitable for stateless objects, shared resources, and scenarios where only one instance is needed throughout the application. 
Examples include database connection pools, service classes, and DAO classes.

Prototype scope is ideal for stateful beans or instances that hold temporary data and are expected to change frequently. 
Examples include non-thread-safe classes or any component that requires new data on every use.
-------------------------------------
** @Bean vs. @Component

@Component and @Bean do two quite different things, and shouldn't be confused.

@Component (and @Service and @Repository) are used to auto-detect and auto-configure beans using classpath scanning. 
There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). 
Control of wiring is quite limited with this approach, since it's purely declarative.

@Bean is used to explicitly declare a single bean, rather than letting Spring do it automatically as above.
It decouples the declaration of the bean from the class definition, and lets you create and configure beans exactly how you choose.
@Bean annotation is used to indicate that a method instantiates, configures, 
and initializes a new object to be managed by the Spring IoC container. mostly third-party objects like RabbitMqTemplate, KafkaTemplate


** @Transactional--
   rollback happens for runtime, unchecked exceptions only. The checked exception does not trigger a rollback of the transaction. 
We can, of course, configure this behavior with the rollbackFor and noRollbackFor annotation parameters.

 eg: @Transactional(rollbackFor = MyCheckedException.class)
    public void foo() {

**@Scheduled(fixedDelay = 1000) -- Cron jobs

** @SpringBootApplication 
•	@EnableAutoConfiguration: enable Spring Boot’s auto-configuration mechanism - Spring Boot examines the classpath to identify dependencies and determine 
which auto-configurations to apply
•	@ComponentScan: enable @Component scan on the package where the application is located.
•	@Configuration: allow to register extra beans in the context or import additional configuration classes



** ModelMapper- maaping between inetrnal entities and extrenal DTOs

** @transient- in @entity doent allow that value to persist in DB. There are certain fields or properties in an entity that should be ignored during the data persistence process such as the data which is being calculated for displaying, temporary variables, 
and other data which is relevant only within the application logic but is not required in the database

**spring.jpa.hibernate.ddl-auto=create(schema recretaed everytime app restarts, previous data is lost), validate,update(avoids data loss), create drop


**@websecurity: WebSecurityConfigurerAdapter Class
 protected void configure(HttpSecurity http)
        throws Exception
    {
           http.authorizeRequests()
            .antMatchers("/basic")
            .hasAnyRole("BASIC", "ADMIN")
            .antMatchers("/admin")
            .hasRole("ADMIN")
            .antMatchers("/")
            .permitAll()
            .anyRequest()
            .authenticated()


**@lazy - lazy initialiasation of bean. Generally object comes up as the project builds, with Lazy it will come on its first call.


-----------Mapping:
** One2Many,Manyto Many to one -> fetch.type=lazy or Eager// lazy will fetch on demand , eager will create as primary class gets loaded
**to avoid a child being deleted if Parent is deleted ---@OneToMany(mappedBy="foo", orphanRemoval=false)
** CASCADEType

---------------- Entity Composite Primary key:
  @EmbeddedId : for more flexible keys OR
   @IdClass annotation : for fixed values





-----------------Call a Proc in Spring-

@Procedure(name = "Car.getTotalCardsbyModelEntity")
int getTotalCarsByModelEntiy(@Param("model_in") String model);

OR

@Query(value = "CALL FIND_CARS_AFTER_YEAR(:year_in);", nativeQuery = true)
List<Car> findCarsAfterYear(@Param("year_in") Integer year_in);
