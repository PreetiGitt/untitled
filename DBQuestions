Query Optimization:
  1.using indexes,
  2.avoiding query in loops
  3.Avoid cartesian product, review the joins
  4. Use where instaed of HAving
   5. select instead of select *
   6. Keep Wild cards at the End of Phrases
  7. use Limits and offset
  
--------------
how sql indexing can help with spring jpa
 @Entity
@Table(name = "users", indexes = {
    @Index(name = "idx_email", columnList = "email"),
    @Index(name = "idx_status_category", columnList = "status, category")
})
public class User {}

  User findByEmail(String email);                // Uses email index
List<User> findByStatusAndCategory(String s, String c); // Uses compound index


----------
1.cluster :
 like primary key, good for sorting and range queries eg: rollno in student table
- can have only one clustered index in a table.
 non cluster index : Suitable for optimizing lookups and queries on non-primary columns. eg: name in student table
 - can ahve more than one clustered index in table.

With a clustered index the rows are stored physically on the disk in the same order as the index. Therefore, there can be only one clustered index.

With a non clustered index there is a second list that has pointers to the physical rows. You can have many non clustered indices, 
although each new index will increase the time it takes to write new records.

It is generally faster to read from a clustered index if you want to get back all the columns. You do not have to go first to the index and then to the table.

Writing to a table with a clustered index can be slower, if there is a need to rearrange the data.

2.In which index insert or update operation is faster

3.What is normalization: to reduce redundancy and maintain atomicity.

-----------
** ACID stands for Atomicity, Consistency, Isolation, and Durability.
    Durability guarantees that once the transaction completes and changes are written to the database, they are persisted.

**Transaction Isolation in DB:
  1. Read Uncommited: allows dirty reads
  2. Read Commited 
  3. Repeatable read : row which is read is blocked for update(transaction that reads data 
                from a row blocks any other writing transactions from accessing the same row)
  4. Serializable : whole table is blocked while read.


**DDL- CATD-> create , Alter, Truncate, Drop
  DML-UID-> update,insert, delete

**  Primary vs. Foreign Key
unique & not-NULL || can be NULL 
single            ||Multiple foreign keys can exist within a table, depending on the relationships with other tables.

•	Nth highest: 
SELECT salary 
FROM employee 
ORDER BY salary desc limit n-1,1
Limit offset (rows to ignore), rows to print
Eg: 2nd highest – ignore first row the highest, and print one row.

•	Today’ Date:
SELECT GETDATE();

•	Joins:
Inner Join= Common
Left/Right= Common +left/right
Cross = total-> common+left+right

 eg: SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

•	Order by multiple column:
SELECT * FROM Customers ORDER BY Country, CustomerName;        
 This means that it orders by Country, but if some rows have the same Country,      it orders them by CustomerName


*    Find duplicate records
    SELECT * FROM  users GROUP BY name, email HAVING COUNT(*) > 1
  
      

