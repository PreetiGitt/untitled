JDK11 feature:
   - New String methods like .repeat(n), .isBlank(), .lines(), .stripTrailing(), .stripLeading()  
   - Epsilon Garbage Collector for testing basis

Copy Constructor-

----------How to deal Out of memeory error in Java---
------JDK 17 features---
1. sealed classe:
   sealed class Shape permits Circle, Square, Rectangle { }
2. randomnumber generator
3. Switch case: enhnaced -> no need of btreak statements.
   Type pattern
    Guarded pattern
4. Record Claaes :
    eg: public record Animal(String name, String animalType, long runningSpeed) {
}

-------------------------------
Immmutabilty in JAVA :
 1. Make your class final - 
 2. Make all the fields private and final 
 3. Don't provide any methods that change the state of your instance -readOnly or getter methods
 4. If you have mutable fields in your class, like List, or Date, making them final won't suffice. You should return a defensive copy from their getters, so that their state isn't mutated by calling methods.
For the 4th point, say you have a Date field in your class, then the getter for that field should look like:

public Date getDate() {
    return new Date(this.date.getTime());
}
Making a defensive copy can become a headache, when your mutable field itself comprises of some mutable field, and that in turn can contain some other mutable field. In that case, you would need to make copy of each of them iteratively. We name this iterative copy of mutable fields as Deep Copy.

Implementing deep copy by yourself may be cumbersome. But,keeping that issue apart, you should consider your class design again,
---------------------------------------
JDK 8:
 Functional interface types:
  1. Consumer : void consume (T t)
  2.Predicate : boolean apply (T t)
  3. Function : R apply (T t)
  4. Supplier : R apply()

----------
Ways to create a new instance :
Using new keyword
Using new instance
Using clone() method
Using deserialization
Using newInstance() method of Constructor class
-------------------------------
Iterators in java are used to iterate over the Collection objects.Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural modification of the collection. Structural modification means adding, removing any element from collection while a thread is iterating over that collection. Iterator on ArrayList, HashMap classes are some examples of fail-fast Iterator.
Fail-Safe iterators don’t throw any exceptions if a collection is structurally modified while iterating over it. This is because, they operate on the clone of the collection, not on the original collection and that’s why they are called fail-safe iterators.
Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator.
